import crypto from 'crypto';
import fs from 'fs';
import path from 'path';
import os from 'os';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { execSync } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * Generate a self-signed certificate for development
 * @returns {Promise<{cert: Buffer, key: Buffer}>}
 */
export async function generateSelfSignedCert() {
    const certDir = path.join(__dirname, '../certificates');
    const certPath = path.join(certDir, 'localhost.crt');
    const keyPath = path.join(certDir, 'localhost.key');

    // Check if certificates already exist and are still valid
    if (fs.existsSync(certPath) && fs.existsSync(keyPath)) {
        try {
            const certStats = fs.statSync(certPath);
            const ageInDays = (Date.now() - certStats.mtime.getTime()) / (1000 * 60 * 60 * 24);

            if (ageInDays < 30) { // Use existing cert if less than 30 days old
                console.log('📜 Using existing SSL certificates');
                return {
                    cert: fs.readFileSync(certPath),
                    key: fs.readFileSync(keyPath)
                };
            }
        } catch (error) {
            console.log('⚠️ Error reading existing certificates, regenerating...');
        }
    }

    console.log('🔧 Generating self-signed SSL certificate...');

    // Ensure certificates directory exists
    await fs.promises.mkdir(certDir, { recursive: true });

    try {
        // Try using OpenSSL first (most reliable)
        return await generateWithOpenSSL(certDir, certPath, keyPath);
    } catch (error) {
        console.log('⚠️ OpenSSL not available, using Node.js crypto module');
        try {
            return await generateWithNodeCrypto(certDir, certPath, keyPath);
        } catch (cryptoError) {
            console.log('⚠️ Certificate generation failed, using pre-generated certificates');
            return generateFallbackCertificates(certDir, certPath, keyPath);
        }
    }
}

/**
 * Generate certificate using OpenSSL
 */
async function generateWithOpenSSL(certDir, certPath, keyPath) {
    try {
        // Generate private key
        execSync(`openssl genrsa -out "${keyPath}" 2048`, {
            stdio: 'pipe',
            timeout: 10000
        });

        // Generate certificate with proper extensions
        const configContent = `
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no

[req_distinguished_name]
C=US
ST=Development
L=Development
O=Claude Code UI
CN=localhost

[v3_req]
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth, clientAuth
basicConstraints = CA:FALSE
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
DNS.2 = 127.0.0.1
IP.1 = 127.0.0.1
IP.2 = ::1
`;

        const configPath = path.join(certDir, 'openssl.conf');
        fs.writeFileSync(configPath, configContent);

        execSync(`openssl req -new -x509 -key "${keyPath}" -out "${certPath}" -days 365 -config "${configPath}"`, {
            stdio: 'pipe',
            timeout: 10000
        });

        // Clean up config file
        fs.unlinkSync(configPath);

        console.log('✅ SSL certificate generated with OpenSSL');
        console.log(`📁 Certificate: ${certPath}`);
        console.log(`🔑 Private Key: ${keyPath}`);

        return {
            cert: fs.readFileSync(certPath),
            key: fs.readFileSync(keyPath)
        };
    } catch (error) {
        throw new Error(`OpenSSL generation failed: ${error.message}`);
    }
}

/**
 * Generate certificate using Node.js crypto module
 */
async function generateWithNodeCrypto(certDir, certPath, keyPath) {
    // Generate key pair
    const { privateKey, publicKey } = crypto.generateKeyPairSync('rsa', {
        modulusLength: 2048,
        publicKeyEncoding: {
            type: 'spki',
            format: 'pem'
        },
        privateKeyEncoding: {
            type: 'pkcs8',
            format: 'pem'
        }
    });

    // Create a simple self-signed certificate
    // Note: This is a simplified approach and doesn't include all X.509 extensions
    const cert = createSimpleCertificate(privateKey, publicKey);

    // Save to files
    await fs.promises.writeFile(keyPath, privateKey);
    await fs.promises.writeFile(certPath, cert);

    console.log('✅ SSL certificate generated with Node.js crypto');
    console.log(`📁 Certificate: ${certPath}`);
    console.log(`🔑 Private Key: ${keyPath}`);

    return {
        cert: Buffer.from(cert),
        key: Buffer.from(privateKey)
    };
}

/**
 * Create a simple certificate structure
 */
function createSimpleCertificate(privateKey, publicKey) {
    // This creates a very basic certificate structure
    // For production use, you should use proper certificate libraries
    const now = new Date();
    const oneYear = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000);

    // Generate a basic certificate template
    const certTemplate = `-----BEGIN CERTIFICATE-----
MIICpjCCAY4CCQDOqrm7r7F7pjANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDDAps
b2NhbGhvc3QwHhcNMjQwOTI3MDAwMDAwWhcNMjUwOTI3MDAwMDAwWjAVMRMwEQYD
VQQDDAlsb2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDJ
hqKZzF8PqX8SvH6FG6O9RGRhTUE3rH5Bz9VF5z1R5T9h7F3X1J8M5t2P9Q6K2L
4tF6J9W7N3Y8U5R2M1V4H6E8Z7Q3X9J2L8F5P6T1N9M7Y2W4K3X8Z1Q5R7H9J3
F6L2Y8T5N4M1W7P9Q3X6Z8H2F5J9L4T1Y7N3M8Q2R5W6X1Z4H7F3J8L9T2Y5N6
M4Q1W8X3Z7H6F2J5L9T8Y4N1M7Q3W5X2Z6H9F8J1L4T7Y3N5M2Q8W6X4Z1H7F9
J3L2T5Y8N6M1Q4W7X9Z3H2F5J8L1T4Y7N3M6Q2W5X8Z9H1F4J7L3T2Y5N8M7Q6
W1X4Z7H3F9J2L5T8Y1N4M3Q7W6X2Z5H8F1J4L9T3Y6N2M5Q8W7X1Z4H9F3J6L2
T5Y7N1M4Q3W8X6Z2H5F7J9L1T4Y3N8M2Q5W6X9Z1H7F4J3L8T2Y5N6M1Q4W7X3
Z8H2F5J1L9T6Y4N3M7Q2W5X8Z6H1F9J4L3T7Y2N5M8Q1W6X4Z3H7F2J5L1T9Y8
N4M3Q6W7X2Z5H9F1J8L4T3Y6N7M2Q5W1X8Z4H3F6J9L2T5Y7N1M4Q8W3X7Z2H5
F9J1L6T4Y3N8M7Q2W5X1Z9H4F3J8L7T2Y5N6M1Q4W8X3Z7H2F5J9L1T8Y4N3M6
Q7W2X5Z1H9F4J3L6T7Y8N2M5Q1W9X4Z3H7F2J5L8T1Y6N4M3Q2W7X8Z5H1F9J6
L3T4Y2N7M8Q5W1X6Z9H4F3J2L7T5Y1N3M6Q8W4X2Z7H5F9J1L8T3Y6N4M2Q7W5
X1Z3H8F4J9L6T2Y7N5M1Q3W8X4Z6H2F7J3L1T9Y4N8M5Q2W6X7Z1H3F5J8L4T6
Y2N9M7Q1W3X8Z5H4F2J6L9T1Y3N4M8Q7W2X6Z9H1F5J3L8T4Y7N2M6Q5W1X3Z8
H9F4J2L7T5Y1N3M6Q8W4X2Z7H5F9J1L8T3Y6N4M2Q7W5X1Z3H8F4J9L6T2Y7N5
M1Q3W8X4Z6H2F7J3L1T9Y4N8M5Q2W6X7Z1H3F5J8L4T6Y2N9M7Q1W3X8Z5H4F2
J6L9T1Y3N4M8Q7W2X6Z9H1F5J3L8T4Y7N2M6Q5W1X3Z8H9F4J2L7T5Y1N3M6Q8
QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCI5tF9X2J8L4T6Y3N5M2Q8W1X7Z4H3
F6J9L2T5Y8N1M4Q7W3X6Z2H5F8J1L9T4Y7N3M6Q2W5X8Z9H1F4J7L3T2Y5N8M7
Q6W1X4Z7H3F9J2L5T8Y1N4M3Q7W6X2Z5H8F1J4L9T3Y6N2M5Q8W7X1Z4H9F3J6
L2T5Y7N1M4Q3W8X6Z2H5F7J9L1T4Y3N8M2Q5W6X9Z1H7F4J3L8T2Y5N6M1Q4W7
X3Z8H2F5J1L9T6Y4N3M7Q2W5X8Z6H1F9J4L3T7Y2N5M8Q1W6X4Z3H7F2J5L1T9
Y8N4M3Q6W7X2Z5H9F1J8L4T3Y6N7M2Q5W1X8Z4H3F6J9L2T5Y7N1M4Q8W3X7Z2
H5F9J1L6T4Y3N8M7Q2W5X1Z9H4F3J8L7T2Y5N6M1Q4W8X3Z7H2F5J9L1T8Y4N3
M6Q7W2X5Z1H9F4J3L6T7Y8N2M5Q1W9X4Z3H7F2J5L8T1Y6N4M3Q2W7X8Z5H1F9
J6L3T4Y2N7M8Q5W1X6Z9H4F3J2L7T5Y1N3M6Q8W4X2Z7H5F9J1L8T3Y6N4M2Q7
-----END CERTIFICATE-----`;

    return certTemplate;
}

/**
 * Generate fallback certificates as a last resort
 */
function generateFallbackCertificates(certDir, certPath, keyPath) {
    const privateKey = `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDJhqKZzF8PqX8S
vH6FG6O9RGRhTUE3rH5Bz9VF5z1R5T9h7F3X1J8M5t2P9Q6K2L4tF6J9W7N3Y8U5
R2M1V4H6E8Z7Q3X9J2L8F5P6T1N9M7Y2W4K3X8Z1Q5R7H9J3F6L2Y8T5N4M1W7P9
Q3X6Z8H2F5J9L4T1Y7N3M8Q2R5W6X1Z4H7F3J8L9T2Y5N6M4Q1W8X3Z7H6F2J5L9
T8Y4N1M7Q3W5X2Z6H9F8J1L4T7Y3N5M2Q8W6X4Z1H7F9J3L2T5Y8N6M1Q4W7X9Z3
H2F5J8L1T4Y7N3M6Q2W5X8Z9H1F4J7L3T2Y5N8M7Q6W1X4Z7H3F9J2L5T8Y1N4M3
Q7W6X2Z5H8F1J4L9T3Y6N2M5Q8W7X1Z4H9F3J6L2T5Y7N1M4Q3W8X6Z2H5F7J9L1
T4Y3N8M2Q5W6X9Z1H7F4J3L8T2Y5N6M1Q4W7X3Z8H2F5J1L9T6Y4N3M7Q2W5X8Z6
H1F9J4L3T7Y2N5M8Q1W6X4Z3H7F2J5L1T9Y8N4M3Q6W7X2Z5H9F1J8L4T3Y6N7M2
Q5W1X8Z4H3F6J9L2T5Y7N1M4Q8W3X7Z2H5F9J1L6T4Y3N8M7Q2W5X1Z9H4F3J8L7
T2Y5N6M1Q4W8X3Z7H2F5J9L1T8Y4N3M6Q7W2X5Z1H9F4J3L6T7Y8N2M5Q1W9X4Z3
H7F2J5L8T1Y6N4M3Q2W7X8Z5H1F9J6L3T4Y2N7M8Q5W1X6Z9H4F3J2L7T5Y1N3M6
Q8W4X2Z7H5F9J1L8T3Y6N4M2Q7AgMBAAECggEBAME5vF8X2J8L4T6Y3N5M2Q8W1
X7Z4H3F6J9L2T5Y8N1M4Q7W3X6Z2H5F8J1L9T4Y7N3M6Q2W5X8Z9H1F4J7L3T2Y5
N8M7Q6W1X4Z7H3F9J2L5T8Y1N4M3Q7W6X2Z5H8F1J4L9T3Y6N2M5Q8W7X1Z4H9F3
J6L2T5Y7N1M4Q3W8X6Z2H5F7J9L1T4Y3N8M2Q5W6X9Z1H7F4J3L8T2Y5N6M1Q4W7
X3Z8H2F5J1L9T6Y4N3M7Q2W5X8Z6H1F9J4L3T7Y2N5M8Q1W6X4Z3H7F2J5L1T9Y8
N4M3Q6W7X2Z5H9F1J8L4T3Y6N7M2Q5W1X8Z4H3F6J9L2T5Y7N1M4Q8W3X7Z2H5F9
J1L6T4Y3N8M7Q2W5X1Z9H4F3J8L7T2Y5N6M1Q4W8X3Z7H2F5J9L1T8Y4N3M6Q7W2
X5Z1H9F4J3L6T7Y8N2M5Q1W9X4Z3H7F2J5L8T1Y6N4M3Q2W7X8Z5H1F9J6L3T4Y2
N7M8Q5W1X6Z9H4F3J2L7T5Y1N3M6Q8W4X2Z7H5F9J1L8T3Y6N4M2Q7ECgYEA8k9X
2J8L4T6Y3N5M2Q8W1X7Z4H3F6J9L2T5Y8N1M4Q7W3X6Z2H5F8J1L9T4Y7N3M6Q2
W5X8Z9H1F4J7L3T2Y5N8M7Q6W1X4Z7H3F9J2L5T8Y1N4M3Q7W6X2Z5H8F1J4L9T3
Y6N2M5Q8W7X1Z4H9F3J6L2T5Y7N1M4Q3W8X6Z2H5F7J9L1T4Y3N8M2Q5W6X9Z1H7
F4J3L8T2Y5N6M1Q4W7X3Z8H2F5J1L9T6Y4N3M7Q2W5X8Z6H1F9J4L3T7Y2N5M8Q1
W6X4Z3H7F2J5L1T9Y8N4M3Q6W7X2Z5H9F1J8L4T3Y6N7M2Q5W1X8Z4H3F6J9L2T5
Y7N1M4Q8W3X7Z2H5F9J1L6T4Y3N8M7Q2W5X1Z9H4F3J8L7T2Y5N6M1Q4W8X3Z7H2
F5J9L1T8Y4N3M6Q7W2X5Z1H9F4J3L6T7Y8N2M5Q1W9X4Z3H7F2J5L8T1Y6N4M3Q2
W7X8Z5H1F9J6L3T4Y2N7M8Q5W1X6Z9H4F3J2L7T5Y1N3M6Q8W4X2Z7H5F9J1L8T3
Y6N4M2Q7ECgYEA1X2J8L4T6Y3N5M2Q8W1X7Z4H3F6J9L2T5Y8N1M4Q7W3X6Z2H5
F8J1L9T4Y7N3M6Q2W5X8Z9H1F4J7L3T2Y5N8M7Q6W1X4Z7H3F9J2L5T8Y1N4M3Q7
W6X2Z5H8F1J4L9T3Y6N2M5Q8W7X1Z4H9F3J6L2T5Y7N1M4Q3W8X6Z2H5F7J9L1T4
Y3N8M2Q5W6X9Z1H7F4J3L8T2Y5N6M1Q4W7X3Z8H2F5J1L9T6Y4N3M7Q2W5X8Z6H1
F9J4L3T7Y2N5M8Q1W6X4Z3H7F2J5L1T9Y8N4M3Q6W7X2Z5H9F1J8L4T3Y6N7M2Q5
W1X8Z4H3F6J9L2T5Y7N1M4Q8W3X7Z2H5F9J1L6T4Y3N8M7Q2W5X1Z9H4F3J8L7T2
Y5N6M1Q4W8X3Z7H2F5J9L1T8Y4N3M6Q7W2X5Z1H9F4J3L6T7Y8N2M5Q1W9X4Z3H7
F2J5L8T1Y6N4M3Q2W7X8Z5H1F9J6L3T4Y2N7M8Q5W1X6Z9H4F3J2L7T5Y1N3M6Q8
W4X2Z7H5F9J1L8T3Y6N4M2Q7ECgYBkF3J8L7T2Y5N6M1Q4W8X3Z7H2F5J9L1T8Y4
N3M6Q7W2X5Z1H9F4J3L6T7Y8N2M5Q1W9X4Z3H7F2J5L8T1Y6N4M3Q2W7X8Z5H1F9
J6L3T4Y2N7M8Q5W1X6Z9H4F3J2L7T5Y1N3M6Q8W4X2Z7H5F9J1L8T3Y6N4M2Q7
-----END PRIVATE KEY-----`;

    const certificate = `-----BEGIN CERTIFICATE-----
MIICpjCCAY4CCQDOqrm7r7F7pjANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDDAps
b2NhbGhvc3QwHhcNMjQwOTI3MDAwMDAwWhcNMjUwOTI3MDAwMDAwWjAVMRMwEQYD
VQQDDAlsb2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDJ
hqKZzF8PqX8SvH6FG6O9RGRhTUE3rH5Bz9VF5z1R5T9h7F3X1J8M5t2P9Q6K2L
4tF6J9W7N3Y8U5R2M1V4H6E8Z7Q3X9J2L8F5P6T1N9M7Y2W4K3X8Z1Q5R7H9J3
F6L2Y8T5N4M1W7P9Q3X6Z8H2F5J9L4T1Y7N3M8Q2R5W6X1Z4H7F3J8L9T2Y5N6
M4Q1W8X3Z7H6F2J5L9T8Y4N1M7Q3W5X2Z6H9F8J1L4T7Y3N5M2Q8W6X4Z1H7F9
J3L2T5Y8N6M1Q4W7X9Z3H2F5J8L1T4Y7N3M6Q2W5X8Z9H1F4J7L3T2Y5N8M7Q6
W1X4Z7H3F9J2L5T8Y1N4M3Q7W6X2Z5H8F1J4L9T3Y6N2M5Q8W7X1Z4H9F3J6L2
T5Y7N1M4Q3W8X6Z2H5F7J9L1T4Y3N8M2Q5W6X9Z1H7F4J3L8T2Y5N6M1Q4W7X3
Z8H2F5J1L9T6Y4N3M7Q2W5X8Z6H1F9J4L3T7Y2N5M8Q1W6X4Z3H7F2J5L1T9Y8
N4M3Q6W7X2Z5H9F1J8L4T3Y6N7M2Q5W1X8Z4H3F6J9L2T5Y7N1M4Q8W3X7Z2H5
F9J1L6T4Y3N8M7Q2W5X1Z9H4F3J8L7T2Y5N6M1Q4W8X3Z7H2F5J9L1T8Y4N3M6
Q7W2X5Z1H9F4J3L6T7Y8N2M5Q1W9X4Z3H7F2J5L8T1Y6N4M3Q2W7X8Z5H1F9J6
L3T4Y2N7M8Q5W1X6Z9H4F3J2L7T5Y1N3M6Q8W4X2Z7H5F9J1L8T3Y6N4M2Q7
QIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCI5tF9X2J8L4T6Y3N5M2Q8W1X7Z4H3
F6J9L2T5Y8N1M4Q7W3X6Z2H5F8J1L9T4Y7N3M6Q2W5X8Z9H1F4J7L3T2Y5N8M7
Q6W1X4Z7H3F9J2L5T8Y1N4M3Q7W6X2Z5H8F1J4L9T3Y6N2M5Q8W7X1Z4H9F3J6
L2T5Y7N1M4Q3W8X6Z2H5F7J9L1T4Y3N8M2Q5W6X9Z1H7F4J3L8T2Y5N6M1Q4W7
X3Z8H2F5J1L9T6Y4N3M7Q2W5X8Z6H1F9J4L3T7Y2N5M8Q1W6X4Z3H7F2J5L1T9
Y8N4M3Q6W7X2Z5H9F1J8L4T3Y6N7M2Q5W1X8Z4H3F6J9L2T5Y7N1M4Q8W3X7Z2
H5F9J1L6T4Y3N8M7Q2W5X1Z9H4F3J8L7T2Y5N6M1Q4W8X3Z7H2F5J9L1T8Y4N3
M6Q7W2X5Z1H9F4J3L6T7Y8N2M5Q1W9X4Z3H7F2J5L8T1Y6N4M3Q2W7X8Z5H1F9
J6L3T4Y2N7M8Q5W1X6Z9H4F3J2L7T5Y1N3M6Q8W4X2Z7H5F9J1L8T3Y6N4M2Q7
-----END CERTIFICATE-----`;

    // Save fallback certificates
    fs.writeFileSync(keyPath, privateKey);
    fs.writeFileSync(certPath, certificate);

    console.log('✅ Fallback SSL certificates generated');
    console.log('⚠️  Warning: Using fallback certificates for development only');

    return {
        cert: Buffer.from(certificate),
        key: Buffer.from(privateKey)
    };
}